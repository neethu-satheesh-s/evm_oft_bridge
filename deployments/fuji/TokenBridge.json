{
  "address": "0x7B2D8b120a24eCBf23da1b9CA6c80E99f187BA55",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_aptosChainId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "EnableEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        }
      ],
      "name": "Receive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RegisterToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "aptosChainId",
          "type": "uint16"
        }
      ],
      "name": "SetAptosChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeFeeBP",
          "type": "uint256"
        }
      ],
      "name": "SetBridgeBP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetGlobalPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "localChainId",
          "type": "uint16"
        }
      ],
      "name": "SetLocalChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetTokenPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "SetUseCustomAdapterParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "name": "SetWETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTVL",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BP_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARED_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "accruedFeeLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aptosChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeFeeBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "enableEmergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ld2sdRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LzLib.CallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "quoteForSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LzLib.CallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendETHToAptos",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LzLib.CallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendToAptos",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_aptosChainId",
          "type": "uint16"
        }
      ],
      "name": "setAptosChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bridgeFeeBP",
          "type": "uint256"
        }
      ],
      "name": "setBridgeFeeBP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setGlobalPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setTokenPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "setUseCustomAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "setWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tvlSDs",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useCustomAdapterParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawEmergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_amountSD",
          "type": "uint64"
        }
      ],
      "name": "withdrawTVL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbec0b936fbad6a93a6351490a64291789c32ac09de48014412632d2dd6d2a91a",
  "receipt": {
    "to": null,
    "from": "0x4f08fb97BB3c298A173b5B0E880928EefCaDbcDa",
    "contractAddress": "0x7B2D8b120a24eCBf23da1b9CA6c80E99f187BA55",
    "transactionIndex": 0,
    "gasUsed": "3925127",
    "logsBloom": "0x
    "blockHash": "0x9f3282507d03b2233605f36ec30a990207de3f4e2c5f49c15a7a8b1168261773",
    "transactionHash": "0xbec0b936fbad6a93a6351490a64291789c32ac09de48014412632d2dd6d2a91a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33790028,
        "transactionHash": "0xbec0b936fbad6a93a6351490a64291789c32ac09de48014412632d2dd6d2a91a",
        "address": "0x7B2D8b120a24eCBf23da1b9CA6c80E99f187BA55",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f08fb97bb3c298a173b5b0e880928eefcadbcda"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9f3282507d03b2233605f36ec30a990207de3f4e2c5f49c15a7a8b1168261773"
      }
    ],
    "blockNumber": 33790028,
    "cumulativeGasUsed": "3925127",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6fcb97553d41516cb228ac03fdc8b9a0a9df04a1",
    108
  ],
  "numDeployments": 2,
  "solcInputHash": "c875adc7a37bbf19051269d768bd3c19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_aptosChainId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"EnableEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RegisterToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"aptosChainId\",\"type\":\"uint16\"}],\"name\":\"SetAptosChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeFeeBP\",\"type\":\"uint256\"}],\"name\":\"SetBridgeBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetGlobalPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"localChainId\",\"type\":\"uint16\"}],\"name\":\"SetLocalChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetTokenPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"SetUseCustomAdapterParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"SetWETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"WithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"WithdrawTVL\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARED_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"accruedFeeLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aptosChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFeeBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ld2sdRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct LzLib.CallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"quoteForSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct LzLib.CallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendETHToAptos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct LzLib.CallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendToAptos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_aptosChainId\",\"type\":\"uint16\"}],\"name\":\"setAptosChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bridgeFeeBP\",\"type\":\"uint256\"}],\"name\":\"setBridgeFeeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setGlobalPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setTokenPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"setUseCustomAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tvlSDs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCustomAdapterParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_amountSD\",\"type\":\"uint64\"}],\"name\":\"withdrawTVL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenBridge.sol\":\"TokenBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x7e64cccdf22a03f513d94960f2145dd801fb5ec88d971de079b5186a9f5e93c4\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n        require(_buf.length >= 4);\\n        uint _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4e52af409b5ec80432292d86fb01906785eb78ac31da3bab4565aabcd6e3e56\",\"license\":\"MIT OR Apache-2.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint _nativeFee\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(\\n        uint16 _dstChainId,\\n        uint16 _type,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit + _extraGas, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) {\\n            // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(\\n        uint16 _dstChainId,\\n        uint16 _packetType,\\n        uint _minGas\\n    ) external onlyOwner {\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x309c994bdcf69ad63c6789694a28eb72a773e2d9db58fe572ab2b34a475972ce\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\\n        );\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload,\\n        bytes memory _reason\\n    ) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0xf4bd9e0ecfa4eb18e7305eb66da44c8a4610c3d5afeaf6a3b44c4bf4b7169b40\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xab7fcacc672251c850f00c0abd4100df9afcc4ad70b8d331a2fd4cb07acab9f4\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac1966c1229bd4dc36b6c69eeb94a537bd9aa2198d7623b9ba7f8f7dbe79bb4c\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xb4df93aeb0fb46373a4fb728ad2603edc8b9a1577eee8d801768dc115bf96498\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/libs/LzLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LzLib {\\n    // LayerZero communication\\n    struct CallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Address type handling\\n\\n    struct AirdropParams {\\n        uint airdropAmount;\\n        bytes32 airdropAddress;\\n    }\\n\\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\\n        } else {\\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\\n        }\\n    }\\n\\n    // Build Adapter Params\\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\\n        // txType 1\\n        // bytes  [2       32      ]\\n        // fields [txType  extraGas]\\n        return abi.encodePacked(uint16(1), _uaGas);\\n    }\\n\\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\\n        require(_params.airdropAmount > 0, \\\"Airdrop amount must be greater than 0\\\");\\n        require(_params.airdropAddress != bytes32(0x0), \\\"Airdrop address must be set\\\");\\n\\n        // txType 2\\n        // bytes  [2       32        32            bytes[]         ]\\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\\n    }\\n\\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    // Decode Adapter Params\\n    function decodeAdapterParams(bytes memory _adapterParams)\\n        internal\\n        pure\\n        returns (\\n            uint16 txType,\\n            uint uaGas,\\n            uint airdropAmount,\\n            address payable airdropAddress\\n        )\\n    {\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\n        assembly {\\n            txType := mload(add(_adapterParams, 2))\\n            uaGas := mload(add(_adapterParams, 34))\\n        }\\n        require(txType == 1 || txType == 2, \\\"Unsupported txType\\\");\\n        require(uaGas > 0, \\\"Gas too low\\\");\\n\\n        if (txType == 2) {\\n            assembly {\\n                airdropAmount := mload(add(_adapterParams, 66))\\n                airdropAddress := mload(add(_adapterParams, 86))\\n            }\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Address type handling\\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\\n        return address(uint160(uint(_bytes32Address)));\\n    }\\n\\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n}\\n\",\"keccak256\":\"0xf61b7357d6638814e1a8d5edeba5c8f5db1cd782882b96da4452604ec0d5c20a\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/TokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/lzApp/libs/LzLib.sol\\\";\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/ITokenBridge.sol\\\";\\n\\ncontract TokenBridge is ITokenBridge, NonblockingLzApp, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint public constant BP_DENOMINATOR = 10000;\\n    uint8 public constant SHARED_DECIMALS = 6;\\n\\n    uint16 public aptosChainId;\\n\\n    uint public bridgeFeeBP;\\n\\n    mapping(address => uint64) public tvlSDs; // token address => tvl\\n    mapping(address => bool) public supportedTokens;\\n    mapping(address => bool) public pausedTokens; // token address => paused\\n    mapping(address => uint) public ld2sdRates; // token address => rate\\n    address public weth;\\n\\n    bool public useCustomAdapterParams;\\n    bool public globalPaused;\\n    bool public emergencyWithdrawEnabled;\\n    uint public emergencyWithdrawTime;\\n\\n    modifier whenNotPaused(address _token) {\\n        require(!globalPaused && !pausedTokens[_token], \\\"TokenBridge: paused\\\");\\n        _;\\n    }\\n\\n    modifier emergencyWithdrawUnlocked() {\\n        require(\\n            emergencyWithdrawEnabled &&\\n                block.timestamp >= emergencyWithdrawTime,\\n            \\\"TokenBridge: emergency withdraw locked\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _layerZeroEndpoint,\\n        uint16 _aptosChainId\\n    ) NonblockingLzApp(_layerZeroEndpoint) {\\n        aptosChainId = _aptosChainId;\\n    }\\n\\n    // _token = bnb usdt 0x70Fec95ef966aE4Eab9E3BA9c6389fbDf30F3c4a\\n\\n    // _token = avalanche fuji usdt - 0xDb8e825702562B2bC6e82aaAF6aB6E15C7D042b1\\n    // _toAddress = aptos user wallet address 0x87ab7d47a9b0ac84b856168b68fff06408cc5f1c691a6c5366c3ab116d76d93c\\n    // _amountLD = usdt 1\\n    // CallParams {\\n    // address payable refundAddress; user wallet address - 0x4Aed70Ca724C2c268A4047A89A5d0Ee5Ee3D92ce OR 0\\n    // address zroPaymentAddress; - yser wallet address - 0\\n    // }\\n    // _adapterParams - []\\n    function sendToAptos(\\n        address _token,\\n        bytes32 _toAddress,\\n        uint _amountLD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external payable override whenNotPaused(_token) nonReentrant {\\n        require(supportedTokens[_token], \\\"TokenBridge: token is not supported\\\");\\n\\n        // lock token\\n        // _amountLD = _removeDust(_token, _amountLD);\\n        // _amountLD = _lockTokenFrom(_token, msg.sender, _amountLD);\\n\\n        // add tvl\\n        uint64 amountSD = _LDtoSD(_token, _amountLD);\\n        require(amountSD > 0, \\\"TokenBridge: amountSD must be greater than 0\\\");\\n        tvlSDs[_token] += amountSD;\\n\\n        // send to aptos\\n        _sendToken(\\n            _token,\\n            _toAddress,\\n            amountSD,\\n            _callParams,\\n            _adapterParams,\\n            msg.value\\n        );\\n        emit Send(_token, msg.sender, _toAddress, _amountLD);\\n    }\\n\\n    function sendETHToAptos(\\n        bytes32 _toAddress,\\n        uint _amountLD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external payable override whenNotPaused(weth) nonReentrant {\\n        address _weth = weth; // save gas\\n        require(\\n            _weth != address(0) && supportedTokens[_weth],\\n            \\\"TokenBridge: ETH is not supported\\\"\\n        );\\n        _amountLD = _removeDust(_weth, _amountLD);\\n        require(_amountLD > 0, \\\"TokenBridge: amount must be greater than 0\\\");\\n        require(msg.value >= _amountLD, \\\"TokenBridge: fee not enough\\\");\\n\\n        // wrap eth and add tvl\\n        IWETH(_weth).deposit{value: _amountLD}();\\n        uint64 amountSD = _LDtoSD(_weth, _amountLD);\\n        tvlSDs[_weth] += amountSD;\\n\\n        // send to aptos\\n        _sendToken(\\n            _weth,\\n            _toAddress,\\n            amountSD,\\n            _callParams,\\n            _adapterParams,\\n            msg.value - _amountLD\\n        );\\n        emit Send(address(0), msg.sender, _toAddress, _amountLD);\\n    }\\n\\n    // CallParams {\\n    // address payable refundAddress; user wallet address - 0x4Aed70Ca724C2c268A4047A89A5d0Ee5Ee3D92ce OR 0\\n    // address zroPaymentAddress; - yser wallet address - 0\\n    // }\\n    // _adapterParams - []\\n    function quoteForSend(\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee) {\\n        _checkAdapterParams(_adapterParams);\\n        bytes memory payload = _encodeSendPayload(address(0), bytes32(0), 0);\\n        bool payInZRO = _callParams.zroPaymentAddress != address(0);\\n        return\\n            lzEndpoint.estimateFees(\\n                aptosChainId,\\n                address(this),\\n                payload,\\n                payInZRO,\\n                _adapterParams\\n            );\\n    }\\n\\n    // ---------------------- owner functions ----------------------\\n\\n    // BNB USDT : 0x70Fec95ef966aE4Eab9E3BA9c6389fbDf30F3c4a\\n\\n    // setTrustedRemoteAddress => 108  and remote aptos oft bridge 0xbd6ee7be5e61a1827647762ce4ec0c4b53b9f42a1b377a3b862bf2b1af1a019d\\n\\n    // _token = aptos usdt = 0xea33def69b4bce19afe062e48581d9bc8d7b8d11e154c007a6325f2a45146b53 = the input could be bnb usdt, need to check\\n    function registerToken(address _token) external onlyOwner {\\n        require(_token != address(0), \\\"TokenBridge: invalid token address\\\");\\n        require(\\n            !supportedTokens[_token],\\n            \\\"TokenBridge: token already registered\\\"\\n        );\\n\\n        uint8 localDecimals = _tokenDecimals(_token);\\n        require(\\n            localDecimals >= SHARED_DECIMALS,\\n            \\\"TokenBridge: decimals must be >= SHARED_DECIMALS\\\"\\n        );\\n\\n        supportedTokens[_token] = true;\\n        ld2sdRates[_token] = 10 ** (localDecimals - SHARED_DECIMALS);\\n        emit RegisterToken(_token);\\n    }\\n\\n    function setBridgeFeeBP(uint _bridgeFeeBP) external onlyOwner {\\n        require(\\n            _bridgeFeeBP <= BP_DENOMINATOR,\\n            \\\"TokenBridge: bridge fee > 100%\\\"\\n        );\\n        bridgeFeeBP = _bridgeFeeBP;\\n        emit SetBridgeBP(_bridgeFeeBP);\\n    }\\n\\n    function setWETH(address _weth) external onlyOwner {\\n        require(_weth != address(0), \\\"TokenBridge: invalid token address\\\");\\n        weth = _weth;\\n        emit SetWETH(_weth);\\n    }\\n\\n    function setGlobalPause(bool _paused) external onlyOwner {\\n        globalPaused = _paused;\\n        emit SetGlobalPause(_paused);\\n    }\\n\\n    function setTokenPause(address _token, bool _paused) external onlyOwner {\\n        pausedTokens[_token] = _paused;\\n        emit SetTokenPause(_token, _paused);\\n    }\\n\\n    function setAptosChainId(uint16 _aptosChainId) external onlyOwner {\\n        aptosChainId = _aptosChainId;\\n        emit SetAptosChainId(_aptosChainId);\\n    }\\n\\n    function setUseCustomAdapterParams(\\n        bool _useCustomAdapterParams\\n    ) external onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    function withdrawFee(\\n        address _token,\\n        address _to,\\n        uint _amountLD\\n    ) public onlyOwner {\\n        uint feeLD = accruedFeeLD(_token);\\n        require(_amountLD <= feeLD, \\\"TokenBridge: fee not enough\\\");\\n\\n        IERC20(_token).safeTransfer(_to, _amountLD);\\n        emit WithdrawFee(_token, _to, _amountLD);\\n    }\\n\\n    function withdrawTVL(\\n        address _token,\\n        address _to,\\n        uint64 _amountSD\\n    ) public onlyOwner emergencyWithdrawUnlocked {\\n        tvlSDs[_token] -= _amountSD;\\n\\n        uint amountLD = _SDtoLD(_token, _amountSD);\\n        IERC20(_token).safeTransfer(_to, amountLD);\\n        emit WithdrawTVL(_token, _to, amountLD);\\n    }\\n\\n    function withdrawEmergency(address _token, address _to) external onlyOwner {\\n        // modifier redundant for extra safety\\n        withdrawFee(_token, _to, accruedFeeLD(_token));\\n        withdrawTVL(_token, _to, tvlSDs[_token]);\\n    }\\n\\n    function enableEmergencyWithdraw(bool enabled) external onlyOwner {\\n        emergencyWithdrawEnabled = enabled;\\n        emergencyWithdrawTime = enabled ? block.timestamp + 1 weeks : 0; // overrides existing lock time\\n        emit EnableEmergencyWithdraw(enabled, emergencyWithdrawTime);\\n    }\\n\\n    // override the renounce ownership inherited by zeppelin ownable\\n    function renounceOwnership() public override onlyOwner {}\\n\\n    // receive ETH from WETH\\n    receive() external payable {}\\n\\n    function accruedFeeLD(address _token) public view returns (uint) {\\n        uint tvlLD = _SDtoLD(_token, tvlSDs[_token]);\\n        return IERC20(_token).balanceOf(address(this)) - tvlLD;\\n    }\\n\\n    // ---------------------- internal functions ----------------------\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory,\\n        uint64,\\n        bytes memory _payload\\n    ) internal override {\\n        require(\\n            _srcChainId == aptosChainId,\\n            \\\"TokenBridge: invalid source chain id\\\"\\n        );\\n\\n        (\\n            address token,\\n            address to,\\n            uint64 amountSD,\\n            bool unwrap\\n        ) = _decodeReceivePayload(_payload);\\n        require(!globalPaused && !pausedTokens[token], \\\"TokenBridge: paused\\\");\\n        require(supportedTokens[token], \\\"TokenBridge: token is not supported\\\");\\n\\n        // sub tvl\\n        uint64 tvlSD = tvlSDs[token];\\n        require(tvlSD >= amountSD, \\\"TokenBridge: insufficient liquidity\\\");\\n        tvlSDs[token] = tvlSD - amountSD;\\n\\n        // pay fee\\n        uint amountLD = _SDtoLD(token, amountSD);\\n        (amountLD, ) = bridgeFeeBP > 0 ? _payFee(amountLD) : (amountLD, 0);\\n\\n        // redeem token to receiver\\n        if (token == weth && unwrap) {\\n            _redeemETHTo(weth, payable(to), amountLD);\\n            emit Receive(address(0), to, amountLD);\\n        } else {\\n            to = to == address(0) ? address(0xdEaD) : to; // avoid failure in safeTransfer()\\n            IERC20(token).safeTransfer(to, amountLD);\\n            emit Receive(token, to, amountLD);\\n        }\\n    }\\n\\n    function _redeemETHTo(\\n        address _weth,\\n        address payable _to,\\n        uint _amountLD\\n    ) internal {\\n        IWETH(_weth).withdraw(_amountLD);\\n        _to.transfer(_amountLD);\\n    }\\n\\n    function _lockTokenFrom(\\n        address _token,\\n        address _from,\\n        uint _amountLD\\n    ) internal returns (uint) {\\n        // support token with transfer fee\\n        uint balanceBefore = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransferFrom(_from, address(this), _amountLD);\\n        uint balanceAfter = IERC20(_token).balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    function _tokenDecimals(address _token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = _token.staticcall(\\n            abi.encodeWithSignature(\\\"decimals()\\\")\\n        );\\n        require(success, \\\"TokenBridge: failed to get token decimals\\\");\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    function _payFee(\\n        uint _amountLD\\n    ) internal view returns (uint amountAfterFee, uint fee) {\\n        fee = (_amountLD * bridgeFeeBP) / BP_DENOMINATOR;\\n        amountAfterFee = _amountLD - fee;\\n    }\\n\\n    function _sendToken(\\n        address _token,\\n        bytes32 _toAddress,\\n        uint64 _amountSD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams,\\n        uint _fee\\n    ) internal {\\n        _checkAdapterParams(_adapterParams);\\n        bytes memory payload = _encodeSendPayload(\\n            _token,\\n            _toAddress,\\n            _amountSD\\n        );\\n        _lzSend(\\n            aptosChainId,\\n            payload,\\n            _callParams.refundAddress,\\n            _callParams.zroPaymentAddress,\\n            _adapterParams,\\n            _fee\\n        );\\n    }\\n\\n    // send payload: packet type(1) + remote token(32) + receiver(32) + amount(8)\\n    function _encodeSendPayload(\\n        address _token,\\n        bytes32 _toAddress,\\n        uint64 _amountSD\\n    ) internal pure returns (bytes memory) {\\n        bytes32 tokenBytes32 = LzLib.addressToBytes32(_token);\\n        return\\n            abi.encodePacked(\\n                uint8(PacketType.SEND_TO_APTOS),\\n                tokenBytes32,\\n                _toAddress,\\n                _amountSD\\n            );\\n    }\\n\\n    // receive payload: packet type(1) + remote token(32) + receiver(32) + amount(8) + unwrap flag(1)\\n    function _decodeReceivePayload(\\n        bytes memory _payload\\n    )\\n        internal\\n        pure\\n        returns (address token, address to, uint64 amountSD, bool unwrap)\\n    {\\n        require(_payload.length == 74, \\\"TokenBridge: invalid payload length\\\");\\n        PacketType packetType = PacketType(uint8(_payload[0]));\\n        require(\\n            packetType == PacketType.RECEIVE_FROM_APTOS,\\n            \\\"TokenBridge: unknown packet type\\\"\\n        );\\n        assembly {\\n            token := mload(add(_payload, 33))\\n            to := mload(add(_payload, 65))\\n            amountSD := mload(add(_payload, 73))\\n        }\\n        unwrap = uint8(_payload[73]) == 1;\\n    }\\n\\n    function _checkAdapterParams(bytes calldata _adapterParams) internal view {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(\\n                aptosChainId,\\n                uint16(PacketType.SEND_TO_APTOS),\\n                _adapterParams,\\n                0\\n            );\\n        } else {\\n            require(\\n                _adapterParams.length == 0,\\n                \\\"TokenBridge: _adapterParams must be empty.\\\"\\n            );\\n        }\\n    }\\n\\n    function _SDtoLD(\\n        address _token,\\n        uint64 _amountSD\\n    ) internal view returns (uint) {\\n        return _amountSD * ld2sdRates[_token];\\n    }\\n\\n    function _LDtoSD(\\n        address _token,\\n        uint _amountLD\\n    ) internal view returns (uint64) {\\n        uint amountSD = _amountLD / ld2sdRates[_token];\\n        require(amountSD <= type(uint64).max, \\\"TokenBridge: amountSD overflow\\\");\\n        return uint64(amountSD);\\n    }\\n\\n    function _removeDust(\\n        address _token,\\n        uint _amountLD\\n    ) internal view returns (uint) {\\n        return _SDtoLD(_token, _LDtoSD(_token, _amountLD));\\n    }\\n}\\n\",\"keccak256\":\"0x628dba3efce2379d3d5ff49bfcb1a3f0cff256477138c194a50ba58742936a96\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@layerzerolabs/solidity-examples/contracts/lzApp/libs/LzLib.sol\\\";\\n\\ninterface ITokenBridge {\\n    enum PacketType {\\n        SEND_TO_APTOS,\\n        RECEIVE_FROM_APTOS\\n    }\\n\\n    function sendToAptos(\\n        address _token,\\n        bytes32 _toAddress,\\n        uint _amountLD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function sendETHToAptos(\\n        bytes32 _toAddress,\\n        uint _amountLD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function quoteForSend(\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    event Send(\\n        address indexed token,\\n        address indexed from,\\n        bytes32 indexed to,\\n        uint amountLD\\n    );\\n    event Receive(address indexed token, address indexed to, uint amountLD);\\n    event RegisterToken(address token);\\n    event SetBridgeBP(uint bridgeFeeBP);\\n    event SetWETH(address weth);\\n    event SetGlobalPause(bool paused);\\n    event SetTokenPause(address token, bool paused);\\n    event SetLocalChainId(uint16 localChainId);\\n    event SetAptosChainId(uint16 aptosChainId);\\n    event SetUseCustomAdapterParams(bool useCustomAdapterParams);\\n    event WithdrawFee(address indexed token, address to, uint amountLD);\\n    event WithdrawTVL(address indexed token, address to, uint amountLD);\\n    event EnableEmergencyWithdraw(bool enabled, uint unlockTime);\\n}\\n\",\"keccak256\":\"0x42c866753bd4cb58d71278d51f595871d268a1988d2327e012d3aa93e0915a6d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n\\n    function approve(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa6137fb21c59a9b3bffda58e8706ccab8f89d05f7440ae8312212a4b79ac3632\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004622380380620046228339810160408190526200003491620000c0565b8180620000413362000070565b6001600160a01b03166080525060016006556007805461ffff191661ffff929092169190911790555062000110565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000d457600080fd5b82516001600160a01b0381168114620000ec57600080fd5b602084015190925061ffff811681146200010557600080fd5b809150509250929050565b6080516144be620001646000396000818161085301528181610b2e01528181610d7801528181611092015281816111b40152818161126e01528181611ecc01528181612391015261333d01526144be6000f3fe60806040526004361061031c5760003560e01c806392cc13c5116101ab578063ca23bb4c116100f7578063e3179c3e11610095578063ed629c5c1161006f578063ed629c5c146109ff578063ee7a459614610a20578063f2fde38b14610a50578063f5ecbdbc14610a7057600080fd5b8063e3179c3e14610971578063eab45d9c146109bf578063eb8d72b7146109df57600080fd5b8063d1deba1f116100d1578063d1deba1f14610908578063d71e409e1461091b578063de9b94881461093b578063df2a5b3b1461095157600080fd5b8063ca23bb4c146108b5578063cb8d3b1f146108c8578063cbed8b9c146108e857600080fd5b8063a2f27ae011610164578063b353aaa71161013e578063b353aaa714610841578063baf3292d14610875578063c21f511414610895578063c44618341461082b57600080fd5b8063a2f27ae0146107eb578063a6c3d1651461080b578063abe685cd1461082b57600080fd5b806392cc13c51461071757806393f26a4c14610744578063950c8a741461076457806395e2c1681461078457806397167964146107a45780639f38369a146107cb57600080fd5b8063468b96681161026a57806368c4ac26116102235780637533d788116101fd5780637533d7881461068157806376a9099a146106ae5780638cfd8f5c146106c15780638da5cb5b146106f957600080fd5b806368c4ac261461061c57806369a6b3db1461064c578063715018a61461066c57600080fd5b8063468b9668146105165780635747e69f1461054b5780635b769f3c1461056c5780635b8c41e61461058c57806361a552dc146105db57806366ad5c8a146105fc57600080fd5b806310ddb137116102d75780633d8b38f6116102b15780633d8b38f6146104615780633f1f4fa4146104915780633fc8cef3146104be57806342d65a8d146104f657600080fd5b806310ddb137146103ea57806325a9f7921461040a5780632db88ecf1461043357600080fd5b80620d5900146103285780621d35671461034a57806307e0db171461036a57806309824a801461038a5780630df37483146103aa5780631095b6d7146103ca57600080fd5b3661032357005b600080fd5b34801561033457600080fd5b5061034861034336600461360e565b610a90565b005b34801561035657600080fd5b5061034861036536600461369d565b610b2b565b34801561037657600080fd5b50610348610385366004613730565b610d57565b34801561039657600080fd5b506103486103a5366004613760565b610de0565b3480156103b657600080fd5b506103486103c536600461377d565b610f8c565b3480156103d657600080fd5b506103486103e53660046137a7565b610fab565b3480156103f657600080fd5b50610348610405366004613730565b611071565b34801561041657600080fd5b5061042060085481565b6040519081526020015b60405180910390f35b34801561043f57600080fd5b5060075461044e9061ffff1681565b60405161ffff909116815260200161042a565b34801561046d57600080fd5b5061048161047c3660046137e8565b6110c9565b604051901515815260200161042a565b34801561049d57600080fd5b506104206104ac366004613730565b60036020526000908152604090205481565b3480156104ca57600080fd5b50600d546104de906001600160a01b031681565b6040516001600160a01b03909116815260200161042a565b34801561050257600080fd5b506103486105113660046137e8565b611195565b34801561052257600080fd5b50610536610531366004613852565b61121b565b6040805192835260208301919091520161042a565b34801561055757600080fd5b50600d5461048190600160b01b900460ff1681565b34801561057857600080fd5b50610348610587366004613760565b611302565b34801561059857600080fd5b506104206105a73660046138f9565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156105e757600080fd5b50600d5461048190600160a81b900460ff1681565b34801561060857600080fd5b5061034861061736600461369d565b61137e565b34801561062857600080fd5b50610481610637366004613760565b600a6020526000908152604090205460ff1681565b34801561065857600080fd5b506103486106673660046139a7565b61145a565b34801561067857600080fd5b506103486114af565b34801561068d57600080fd5b506106a161069c366004613730565b6114b9565b60405161042a9190613a14565b6103486106bc366004613a27565b611553565b3480156106cd57600080fd5b506104206106dc366004613a8f565b600260209081526000928352604080842090915290825290205481565b34801561070557600080fd5b506000546001600160a01b03166104de565b34801561072357600080fd5b50610420610732366004613760565b600c6020526000908152604090205481565b34801561075057600080fd5b5061034861075f366004613ac2565b61171d565b34801561077057600080fd5b506004546104de906001600160a01b031681565b34801561079057600080fd5b5061034861079f366004613afb565b611766565b3480156107b057600080fd5b506107b9600681565b60405160ff909116815260200161042a565b3480156107d757600080fd5b506106a16107e6366004613730565b61189e565b3480156107f757600080fd5b50610420610806366004613760565b6119b4565b34801561081757600080fd5b506103486108263660046137e8565b611a5a565b34801561083757600080fd5b5061042061271081565b34801561084d57600080fd5b506104de7f000000000000000000000000000000000000000000000000000000000000000081565b34801561088157600080fd5b50610348610890366004613760565b611ae3565b3480156108a157600080fd5b506103486108b0366004613730565b611b39565b6103486108c3366004613b39565b611b85565b3480156108d457600080fd5b506103486108e3366004613ba1565b611e49565b3480156108f457600080fd5b50610348610903366004613bcf565b611ead565b61034861091636600461369d565b611f42565b34801561092757600080fd5b506103486109363660046139a7565b612158565b34801561094757600080fd5b50610420600e5481565b34801561095d57600080fd5b5061034861096c366004613c20565b6121ce565b34801561097d57600080fd5b506109a761098c366004613760565b6009602052600090815260409020546001600160401b031681565b6040516001600160401b03909116815260200161042a565b3480156109cb57600080fd5b506103486109da3660046139a7565b612238565b3480156109eb57600080fd5b506103486109fa3660046137e8565b61228d565b348015610a0b57600080fd5b50600d5461048190600160a01b900460ff1681565b348015610a2c57600080fd5b50610481610a3b366004613760565b600b6020526000908152604090205460ff1681565b348015610a5c57600080fd5b50610348610a6b366004613760565b6122e7565b348015610a7c57600080fd5b506106a1610a8b366004613c5c565b612360565b610a98612413565b612710811115610aef5760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e4272696467653a2062726964676520666565203e2031303025000060448201526064015b60405180910390fd5b60088190556040518181527f9a749c8193bfd56b2b2a05c0bd18fbb0f69801a3fd6576c40b90537fd0fc3854906020015b60405180910390a150565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ba35760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c657200006044820152606401610ae6565b61ffff861660009081526001602052604081208054610bc190613ca9565b80601f0160208091040260200160405190810160405280929190818152602001828054610bed90613ca9565b8015610c3a5780601f10610c0f57610100808354040283529160200191610c3a565b820191906000526020600020905b815481529060010190602001808311610c1d57829003601f168201915b50505050509050805186869050148015610c55575060008151115b8015610c7d575080516020820120604051610c739088908890613cdd565b6040518091039020145b610cd85760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610ae6565b610d4e8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061246d92505050565b50505050505050565b610d5f612413565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610dc557600080fd5b505af1158015610dd9573d6000803e3d6000fd5b5050505050565b610de8612413565b6001600160a01b038116610e0e5760405162461bcd60e51b8152600401610ae690613ced565b6001600160a01b0381166000908152600a602052604090205460ff1615610e855760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4272696467653a20746f6b656e20616c72656164792072656769736044820152641d195c995960da1b6064820152608401610ae6565b6000610e90826124e6565b9050600660ff82161015610eff5760405162461bcd60e51b815260206004820152603060248201527f546f6b656e4272696467653a20646563696d616c73206d757374206265203e3d60448201526f205348415245445f444543494d414c5360801b6064820152608401610ae6565b6001600160a01b0382166000908152600a60205260409020805460ff19166001179055610f2d600682613d45565b610f3890600a613e42565b6001600160a01b0383166000818152600c602090815260409182902093909355519081527ff7fe8023cb2e36bde1d59a88ac5763a8c11be6d25e6819f71bb7e23e5bf0dc1691015b60405180910390a15050565b610f94612413565b61ffff909116600090815260036020526040902055565b610fb3612413565b6000610fbe846119b4565b9050808211156110105760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4272696467653a20666565206e6f7420656e6f75676800000000006044820152606401610ae6565b6110246001600160a01b03851684846125e4565b604080516001600160a01b038581168252602082018590528616917ff15a0a3784dea9b4fe33bc98e2450745e262d310237b2868ea8ef56967ff3ecb91015b60405180910390a250505050565b611079612413565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610dab565b61ffff8316600090815260016020526040812080548291906110ea90613ca9565b80601f016020809104026020016040519081016040528092919081815260200182805461111690613ca9565b80156111635780601f1061113857610100808354040283529160200191611163565b820191906000526020600020905b81548152906001019060200180831161114657829003601f168201915b50505050509050838360405161117a929190613cdd565b60405180910390208180519060200120149150509392505050565b61119d612413565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906111ed90869086908690600401613e7a565b600060405180830381600087803b15801561120757600080fd5b505af1158015610d4e573d6000803e3d6000fd5b600080611228848461263b565b60006112358180806126f7565b905060008061124a6040890160208a01613760565b60075460405163040a7bb160e41b81526001600160a01b03928316939093141593507f0000000000000000000000000000000000000000000000000000000000000000909116916340a7bb10916112b49161ffff909116903090879087908d908d90600401613e98565b6040805180830381865afa1580156112d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f49190613eee565b935093505050935093915050565b61130a612413565b6001600160a01b0381166113305760405162461bcd60e51b8152600401610ae690613ced565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe390bcec6614d6b1f8ae47a4d9d46531ce328e3d293ecd6ddd015cb01eff030090602001610b20565b3330146113dc5760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610ae6565b6114528686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781528993509150879087908190840183828082843760009201919091525061274192505050565b505050505050565b611462612413565b600d8054821515600160a81b0260ff60a81b199091161790556040517f5362d4bd13945e8d116b90d83a7050fa61ceb02bb79bfae783377adb46916d9490610b2090831515815260200190565b6114b7612413565b565b600160205260009081526040902080546114d290613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546114fe90613ca9565b801561154b5780601f106115205761010080835404028352916020019161154b565b820191906000526020600020905b81548152906001019060200180831161152e57829003601f168201915b505050505081565b600d548690600160a81b900460ff1615801561158857506001600160a01b0381166000908152600b602052604090205460ff16155b6115a45760405162461bcd60e51b8152600401610ae690613f12565b6115ac612a39565b6001600160a01b0387166000908152600a602052604090205460ff166115e45760405162461bcd60e51b8152600401610ae690613f3f565b60006115f08887612a92565b90506000816001600160401b0316116116605760405162461bcd60e51b815260206004820152602c60248201527f546f6b656e4272696467653a20616d6f756e745344206d75737420626520677260448201526b06561746572207468616e20360a41b6064820152608401610ae6565b6001600160a01b038816600090815260096020526040812080548392906116919084906001600160401b0316613f82565b92506101000a8154816001600160401b0302191690836001600160401b031602179055506116c488888388888834612b19565b86336001600160a01b0316896001600160a01b03167fbe6ff12fec5087498d44bc85f1a83235a630944a1e2d5a7938afe810370a58678960405161170a91815260200190565b60405180910390a450610d4e6001600655565b611725612413565b61173382826103e5856119b4565b6001600160a01b03821660009081526009602052604090205461176290839083906001600160401b0316611766565b5050565b61176e612413565b600d54600160b01b900460ff1680156117895750600e544210155b6117e45760405162461bcd60e51b815260206004820152602660248201527f546f6b656e4272696467653a20656d657267656e6379207769746864726177206044820152651b1bd8dad95960d21b6064820152608401610ae6565b6001600160a01b038316600090815260096020526040812080548392906118159084906001600160401b0316613fa9565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555060006118458483612ba4565b905061185b6001600160a01b03851684836125e4565b604080516001600160a01b038581168252602082018490528616917f49507695f37b729944475cf3388760a14760fef784b7ab5ca8863a5f3f8be6bd9101611063565b61ffff81166000908152600160205260408120805460609291906118c190613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546118ed90613ca9565b801561193a5780601f1061190f5761010080835404028352916020019161193a565b820191906000526020600020905b81548152906001019060200180831161191d57829003601f168201915b5050505050905080516000036119925760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610ae6565b6119ad6000601483516119a59190613fc9565b839190612bd0565b9392505050565b6001600160a01b03811660009081526009602052604081205481906119e39084906001600160401b0316612ba4565b6040516370a0823160e01b815230600482015290915081906001600160a01b038516906370a0823190602401602060405180830381865afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a509190613fdc565b6119ad9190613fc9565b611a62612413565b818130604051602001611a7793929190613ff5565b60408051601f1981840301815291815261ffff8516600090815260016020522090611aa29082614061565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611ad693929190613e7a565b60405180910390a1505050565b611aeb612413565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610b20565b611b41612413565b6007805461ffff191661ffff83169081179091556040519081527f6a9ea26cc7efedf0df6fd048e06f3de4be1a978bb5d440277147c76e1c0eb75a90602001610b20565b600d546001600160a01b03811690600160a81b900460ff16158015611bc357506001600160a01b0381166000908152600b602052604090205460ff16155b611bdf5760405162461bcd60e51b8152600401610ae690613f12565b611be7612a39565b600d546001600160a01b03168015801590611c1a57506001600160a01b0381166000908152600a602052604090205460ff165b611c705760405162461bcd60e51b815260206004820152602160248201527f546f6b656e4272696467653a20455448206973206e6f7420737570706f7274656044820152601960fa1b6064820152608401610ae6565b611c7a8187612cdd565b955060008611611cdf5760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a20616d6f756e74206d75737420626520677265616044820152690746572207468616e20360b41b6064820152608401610ae6565b85341015611d2f5760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4272696467653a20666565206e6f7420656e6f75676800000000006044820152606401610ae6565b806001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d6a57600080fd5b505af1158015611d7e573d6000803e3d6000fd5b50505050506000611d8f8288612a92565b6001600160a01b038316600090815260096020526040812080549293508392909190611dc59084906001600160401b0316613f82565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550611e038289838989898d34611dfe9190613fc9565b612b19565b604051878152889033906000907fbe6ff12fec5087498d44bc85f1a83235a630944a1e2d5a7938afe810370a58679060200160405180910390a450506114526001600655565b611e51612413565b6001600160a01b0382166000818152600b6020908152604091829020805460ff19168515159081179091558251938452908301527fb1656bd3b50ddb6b12ef259c86e9cb359952b53c4403cfb5a83e23c515a35e229101610f80565b611eb5612413565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611f099088908890889088908890600401614120565b600060405180830381600087803b158015611f2357600080fd5b505af1158015611f37573d6000803e3d6000fd5b505050505050505050565b61ffff86166000908152600560205260408082209051611f659088908890613cdd565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080611fe55760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610ae6565b808383604051611ff6929190613cdd565b6040518091039020146120555760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610ae6565b61ffff871660009081526005602052604080822090516120789089908990613cdd565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252612110918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061274192505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e5878787878560405161214795949392919061414e565b60405180910390a150505050505050565b612160612413565b600d805460ff60b01b1916600160b01b8315150217905580612183576000612190565b6121904262093a80614189565b600e81905560408051831515815260208101929092527f27a37fc51e6c5d14309bbed3a54787c8788223b5d9cd5fe10605661665dd84159101610b20565b6121d6612413565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611ad6565b612240612413565b600d8054821515600160a01b0260ff60a01b199091161790556040517f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490610b2090831515815260200190565b612295612413565b61ffff831660009081526001602052604090206122b382848361419c565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611ad693929190613e7a565b6122ef612413565b6001600160a01b0381166123545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ae6565b61235d81612cf2565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156123e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612408919081019061425b565b90505b949350505050565b6000546001600160a01b031633146114b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ae6565b6000806124d05a60966366ad5c8a60e01b8989898960405160240161249594939291906142d1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190612d42565b9150915081611452576114528686868685612dcc565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b0386169161252c919061430f565b600060405180830381855afa9150503d8060008114612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b5091509150816125d05760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4272696467653a206661696c656420746f2067657420746f6b656e60448201526820646563696d616c7360b81b6064820152608401610ae6565b8080602001905181019061240b919061432b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612636908490612e69565b505050565b600d54600160a01b900460ff1615612696576007546117629061ffff16600084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612f3e915050565b80156117625760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a205f61646170746572506172616d73206d7573746044820152691031329032b6b83a3c9760b11b6064820152608401610ae6565b60408051600060208201526001600160a01b03949094166021850152604184019290925260c01b6001600160c01b0319166061830152805180830360490181526069909201905290565b60075461ffff8581169116146127a55760405162461bcd60e51b8152602060048201526024808201527f546f6b656e4272696467653a20696e76616c696420736f7572636520636861696044820152631b881a5960e21b6064820152608401610ae6565b6000806000806127b485613013565b600d5493975091955093509150600160a81b900460ff161580156127f157506001600160a01b0384166000908152600b602052604090205460ff16155b61280d5760405162461bcd60e51b8152600401610ae690613f12565b6001600160a01b0384166000908152600a602052604090205460ff166128455760405162461bcd60e51b8152600401610ae690613f3f565b6001600160a01b0384166000908152600960205260409020546001600160401b039081169083168110156128c75760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20696e73756666696369656e74206c697175696460448201526269747960e81b6064820152608401610ae6565b6128d18382613fa9565b6001600160a01b0386166000908152600960205260408120805467ffffffffffffffff19166001600160401b0393909316929092179091556129138685612ba4565b905060006008541161292757806000612930565b6129308161314d565b50600d549091506001600160a01b03878116911614801561294e5750825b156129b057600d5461296a906001600160a01b0316868361317e565b6040518181526001600160a01b038616906000907ffd19781f43410d9594fd4c02dd1d98dbe99099cbd222d5851a6e183c468d33ca9060200160405180910390a3612a2d565b6001600160a01b038516156129c557846129c9565b61dead5b94506129df6001600160a01b03871686836125e4565b846001600160a01b0316866001600160a01b03167ffd19781f43410d9594fd4c02dd1d98dbe99099cbd222d5851a6e183c468d33ca83604051612a2491815260200190565b60405180910390a35b50505050505050505050565b600260065403612a8b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ae6565b6002600655565b6001600160a01b0382166000908152600c60205260408120548190612ab79084614364565b90506001600160401b03811115612b105760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e4272696467653a20616d6f756e745344206f766572666c6f7700006044820152606401610ae6565b90505b92915050565b612b23838361263b565b6000612b308888886126f7565b600754909150612b9a9061ffff1682612b4c6020890189613760565b612b5c60408a0160208b01613760565b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250613214915050565b5050505050505050565b6001600160a01b0382166000908152600c6020526040812054612b10906001600160401b038416614386565b606081612bde81601f614189565b1015612c1d5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610ae6565b612c278284614189565b84511015612c6b5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610ae6565b606082158015612c8a5760405191506000825260208201604052612cd4565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612cc3578051835260209283019201612cab565b5050858452601f01601f1916604052505b50949350505050565b6000612b1083612ced8585612a92565b612ba4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000606060008060008661ffff166001600160401b03811115612d6757612d6761388c565b6040519080825280601f01601f191660200182016040528015612d91576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115612db3578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff16815260200190815260200160002085604051612dfd919061430f565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90612e5a908790879087908790879061439d565b60405180910390a15050505050565b6000612ebe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133b99092919063ffffffff16565b9050805160001480612edf575080806020019051810190612edf91906143fb565b6126365760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ae6565b6000612f49836133c8565b61ffff80871660009081526002602090815260408083209389168352929052205490915080612fba5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610ae6565b612fc48382614189565b8210156114525760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610ae6565b6000806000808451604a146130765760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20696e76616c6964207061796c6f6164206c656e6044820152620cee8d60eb1b6064820152608401610ae6565b60008560008151811061308b5761308b614418565b016020015160f81c60018111156130a4576130a461434e565b905060018160018111156130ba576130ba61434e565b146131075760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4272696467653a20756e6b6e6f776e207061636b657420747970656044820152606401610ae6565b6021860151945060418601519350604986015192508560498151811061312f5761312f614418565b602001015160f81c60f81b60f81c60ff166001149150509193509193565b600080612710600854846131619190614386565b61316b9190614364565b90506131778184613fc9565b9150915091565b604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b1580156131c057600080fd5b505af11580156131d4573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f1935050505015801561320e573d6000803e3d6000fd5b50505050565b61ffff86166000908152600160205260408120805461323290613ca9565b80601f016020809104026020016040519081016040528092919081815260200182805461325e90613ca9565b80156132ab5780601f10613280576101008083540402835291602001916132ab565b820191906000526020600020905b81548152906001019060200180831161328e57829003601f168201915b50505050509050805160000361331c5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610ae6565b613327878751613424565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c580310090849061337e908b9086908c908c908c908c9060040161442e565b6000604051808303818588803b15801561339757600080fd5b505af11580156133ab573d6000803e3d6000fd5b505050505050505050505050565b606061240b8484600085613495565b600060228251101561341c5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610ae6565b506022015190565b61ffff82166000908152600360205260408120549081900361344557506127105b808211156126365760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610ae6565b6060824710156134f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ae6565b600080866001600160a01b03168587604051613512919061430f565b60006040518083038185875af1925050503d806000811461354f576040519150601f19603f3d011682016040523d82523d6000602084013e613554565b606091505b509150915061356587838387613570565b979650505050505050565b606083156135df5782516000036135d8576001600160a01b0385163b6135d85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ae6565b508161240b565b61240b83838151156135f45781518083602001fd5b8060405162461bcd60e51b8152600401610ae69190613a14565b60006020828403121561362057600080fd5b5035919050565b803561ffff8116811461363957600080fd5b919050565b60008083601f84011261365057600080fd5b5081356001600160401b0381111561366757600080fd5b60208301915083602082850101111561367f57600080fd5b9250929050565b80356001600160401b038116811461363957600080fd5b600080600080600080608087890312156136b657600080fd5b6136bf87613627565b955060208701356001600160401b03808211156136db57600080fd5b6136e78a838b0161363e565b90975095508591506136fb60408a01613686565b9450606089013591508082111561371157600080fd5b5061371e89828a0161363e565b979a9699509497509295939492505050565b60006020828403121561374257600080fd5b612b1082613627565b6001600160a01b038116811461235d57600080fd5b60006020828403121561377257600080fd5b8135612b108161374b565b6000806040838503121561379057600080fd5b61379983613627565b946020939093013593505050565b6000806000606084860312156137bc57600080fd5b83356137c78161374b565b925060208401356137d78161374b565b929592945050506040919091013590565b6000806000604084860312156137fd57600080fd5b61380684613627565b925060208401356001600160401b0381111561382157600080fd5b61382d8682870161363e565b9497909650939450505050565b60006040828403121561384c57600080fd5b50919050565b60008060006060848603121561386757600080fd5b613871858561383a565b925060408401356001600160401b0381111561382157600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156138ca576138ca61388c565b604052919050565b60006001600160401b038211156138eb576138eb61388c565b50601f01601f191660200190565b60008060006060848603121561390e57600080fd5b61391784613627565b925060208401356001600160401b0381111561393257600080fd5b8401601f8101861361394357600080fd5b8035613956613951826138d2565b6138a2565b81815287602083850101111561396b57600080fd5b8160208401602083013760006020838301015280945050505061399060408501613686565b90509250925092565b801515811461235d57600080fd5b6000602082840312156139b957600080fd5b8135612b1081613999565b60005b838110156139df5781810151838201526020016139c7565b50506000910152565b60008151808452613a008160208601602086016139c4565b601f01601f19169290920160200192915050565b602081526000612b1060208301846139e8565b60008060008060008060c08789031215613a4057600080fd5b8635613a4b8161374b565b95506020870135945060408701359350613a68886060890161383a565b925060a08701356001600160401b03811115613a8357600080fd5b61371e89828a0161363e565b60008060408385031215613aa257600080fd5b613aab83613627565b9150613ab960208401613627565b90509250929050565b60008060408385031215613ad557600080fd5b8235613ae08161374b565b91506020830135613af08161374b565b809150509250929050565b600080600060608486031215613b1057600080fd5b8335613b1b8161374b565b92506020840135613b2b8161374b565b915061399060408501613686565b600080600080600060a08688031215613b5157600080fd5b8535945060208601359350613b69876040880161383a565b925060808601356001600160401b03811115613b8457600080fd5b613b908882890161363e565b969995985093965092949392505050565b60008060408385031215613bb457600080fd5b8235613bbf8161374b565b91506020830135613af081613999565b600080600080600060808688031215613be757600080fd5b613bf086613627565b9450613bfe60208701613627565b93506040860135925060608601356001600160401b03811115613b8457600080fd5b600080600060608486031215613c3557600080fd5b613c3e84613627565b9250613c4c60208501613627565b9150604084013590509250925092565b60008060008060808587031215613c7257600080fd5b613c7b85613627565b9350613c8960208601613627565b92506040850135613c998161374b565b9396929550929360600135925050565b600181811c90821680613cbd57607f821691505b60208210810361384c57634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b60208082526022908201527f546f6b656e4272696467653a20696e76616c696420746f6b656e206164647265604082015261737360f01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115612b1357612b13613d2f565b600181815b80851115613d99578160001904821115613d7f57613d7f613d2f565b80851615613d8c57918102915b93841c9390800290613d63565b509250929050565b600082613db057506001612b13565b81613dbd57506000612b13565b8160018114613dd35760028114613ddd57613df9565b6001915050612b13565b60ff841115613dee57613dee613d2f565b50506001821b612b13565b5060208310610133831016604e8410600b8410161715613e1c575081810a612b13565b613e268383613d5e565b8060001904821115613e3a57613e3a613d2f565b029392505050565b6000612b1060ff841683613da1565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612408604083018486613e51565b61ffff871681526001600160a01b038616602082015260a060408201819052600090613ec6908301876139e8565b85151560608401528281036080840152613ee1818587613e51565b9998505050505050505050565b60008060408385031215613f0157600080fd5b505080516020909101519092909150565b602080825260139082015272151bdad95b909c9a5919d94e881c185d5cd959606a1b604082015260600190565b60208082526023908201527f546f6b656e4272696467653a20746f6b656e206973206e6f7420737570706f726040820152621d195960ea1b606082015260800190565b6001600160401b03818116838216019080821115613fa257613fa2613d2f565b5092915050565b6001600160401b03828116828216039080821115613fa257613fa2613d2f565b81810381811115612b1357612b13613d2f565b600060208284031215613fee57600080fd5b5051919050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f82111561263657600081815260208120601f850160051c810160208610156140425750805b601f850160051c820191505b818110156114525782815560010161404e565b81516001600160401b0381111561407a5761407a61388c565b61408e816140888454613ca9565b8461401b565b602080601f8311600181146140c357600084156140ab5750858301515b600019600386901b1c1916600185901b178555611452565b600085815260208120601f198616915b828110156140f2578886015182559484019460019091019084016140d3565b50858210156141105787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff808816835280871660208401525084604083015260806060830152613565608083018486613e51565b61ffff8616815260806020820152600061416c608083018688613e51565b6001600160401b0394909416604083015250606001529392505050565b80820180821115612b1357612b13613d2f565b6001600160401b038311156141b3576141b361388c565b6141c7836141c18354613ca9565b8361401b565b6000601f8411600181146141fb57600085156141e35750838201355b600019600387901b1c1916600186901b178355610dd9565b600083815260209020601f19861690835b8281101561422c578685013582556020948501946001909201910161420c565b50868210156142495760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561426d57600080fd5b81516001600160401b0381111561428357600080fd5b8201601f8101841361429457600080fd5b80516142a2613951826138d2565b8181528560208385010111156142b757600080fd5b6142c88260208301602086016139c4565b95945050505050565b61ffff851681526080602082015260006142ee60808301866139e8565b6001600160401b0385166040840152828103606084015261356581856139e8565b600082516143218184602087016139c4565b9190910192915050565b60006020828403121561433d57600080fd5b815160ff81168114612b1057600080fd5b634e487b7160e01b600052602160045260246000fd5b60008261438157634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417612b1357612b13613d2f565b61ffff8616815260a0602082015260006143ba60a08301876139e8565b6001600160401b038616604084015282810360608401526143db81866139e8565b905082810360808401526143ef81856139e8565b98975050505050505050565b60006020828403121561440d57600080fd5b8151612b1081613999565b634e487b7160e01b600052603260045260246000fd5b61ffff8716815260c06020820152600061444b60c08301886139e8565b828103604084015261445d81886139e8565b6001600160a01b0387811660608601528616608085015283810360a08501529050613ee181856139e856fea2646970667358221220606fdcce0bc67f441e9e15a027fb406ebeb902c69dcb264e0e32ee597975402f64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061031c5760003560e01c806392cc13c5116101ab578063ca23bb4c116100f7578063e3179c3e11610095578063ed629c5c1161006f578063ed629c5c146109ff578063ee7a459614610a20578063f2fde38b14610a50578063f5ecbdbc14610a7057600080fd5b8063e3179c3e14610971578063eab45d9c146109bf578063eb8d72b7146109df57600080fd5b8063d1deba1f116100d1578063d1deba1f14610908578063d71e409e1461091b578063de9b94881461093b578063df2a5b3b1461095157600080fd5b8063ca23bb4c146108b5578063cb8d3b1f146108c8578063cbed8b9c146108e857600080fd5b8063a2f27ae011610164578063b353aaa71161013e578063b353aaa714610841578063baf3292d14610875578063c21f511414610895578063c44618341461082b57600080fd5b8063a2f27ae0146107eb578063a6c3d1651461080b578063abe685cd1461082b57600080fd5b806392cc13c51461071757806393f26a4c14610744578063950c8a741461076457806395e2c1681461078457806397167964146107a45780639f38369a146107cb57600080fd5b8063468b96681161026a57806368c4ac26116102235780637533d788116101fd5780637533d7881461068157806376a9099a146106ae5780638cfd8f5c146106c15780638da5cb5b146106f957600080fd5b806368c4ac261461061c57806369a6b3db1461064c578063715018a61461066c57600080fd5b8063468b9668146105165780635747e69f1461054b5780635b769f3c1461056c5780635b8c41e61461058c57806361a552dc146105db57806366ad5c8a146105fc57600080fd5b806310ddb137116102d75780633d8b38f6116102b15780633d8b38f6146104615780633f1f4fa4146104915780633fc8cef3146104be57806342d65a8d146104f657600080fd5b806310ddb137146103ea57806325a9f7921461040a5780632db88ecf1461043357600080fd5b80620d5900146103285780621d35671461034a57806307e0db171461036a57806309824a801461038a5780630df37483146103aa5780631095b6d7146103ca57600080fd5b3661032357005b600080fd5b34801561033457600080fd5b5061034861034336600461360e565b610a90565b005b34801561035657600080fd5b5061034861036536600461369d565b610b2b565b34801561037657600080fd5b50610348610385366004613730565b610d57565b34801561039657600080fd5b506103486103a5366004613760565b610de0565b3480156103b657600080fd5b506103486103c536600461377d565b610f8c565b3480156103d657600080fd5b506103486103e53660046137a7565b610fab565b3480156103f657600080fd5b50610348610405366004613730565b611071565b34801561041657600080fd5b5061042060085481565b6040519081526020015b60405180910390f35b34801561043f57600080fd5b5060075461044e9061ffff1681565b60405161ffff909116815260200161042a565b34801561046d57600080fd5b5061048161047c3660046137e8565b6110c9565b604051901515815260200161042a565b34801561049d57600080fd5b506104206104ac366004613730565b60036020526000908152604090205481565b3480156104ca57600080fd5b50600d546104de906001600160a01b031681565b6040516001600160a01b03909116815260200161042a565b34801561050257600080fd5b506103486105113660046137e8565b611195565b34801561052257600080fd5b50610536610531366004613852565b61121b565b6040805192835260208301919091520161042a565b34801561055757600080fd5b50600d5461048190600160b01b900460ff1681565b34801561057857600080fd5b50610348610587366004613760565b611302565b34801561059857600080fd5b506104206105a73660046138f9565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156105e757600080fd5b50600d5461048190600160a81b900460ff1681565b34801561060857600080fd5b5061034861061736600461369d565b61137e565b34801561062857600080fd5b50610481610637366004613760565b600a6020526000908152604090205460ff1681565b34801561065857600080fd5b506103486106673660046139a7565b61145a565b34801561067857600080fd5b506103486114af565b34801561068d57600080fd5b506106a161069c366004613730565b6114b9565b60405161042a9190613a14565b6103486106bc366004613a27565b611553565b3480156106cd57600080fd5b506104206106dc366004613a8f565b600260209081526000928352604080842090915290825290205481565b34801561070557600080fd5b506000546001600160a01b03166104de565b34801561072357600080fd5b50610420610732366004613760565b600c6020526000908152604090205481565b34801561075057600080fd5b5061034861075f366004613ac2565b61171d565b34801561077057600080fd5b506004546104de906001600160a01b031681565b34801561079057600080fd5b5061034861079f366004613afb565b611766565b3480156107b057600080fd5b506107b9600681565b60405160ff909116815260200161042a565b3480156107d757600080fd5b506106a16107e6366004613730565b61189e565b3480156107f757600080fd5b50610420610806366004613760565b6119b4565b34801561081757600080fd5b506103486108263660046137e8565b611a5a565b34801561083757600080fd5b5061042061271081565b34801561084d57600080fd5b506104de7f000000000000000000000000000000000000000000000000000000000000000081565b34801561088157600080fd5b50610348610890366004613760565b611ae3565b3480156108a157600080fd5b506103486108b0366004613730565b611b39565b6103486108c3366004613b39565b611b85565b3480156108d457600080fd5b506103486108e3366004613ba1565b611e49565b3480156108f457600080fd5b50610348610903366004613bcf565b611ead565b61034861091636600461369d565b611f42565b34801561092757600080fd5b506103486109363660046139a7565b612158565b34801561094757600080fd5b50610420600e5481565b34801561095d57600080fd5b5061034861096c366004613c20565b6121ce565b34801561097d57600080fd5b506109a761098c366004613760565b6009602052600090815260409020546001600160401b031681565b6040516001600160401b03909116815260200161042a565b3480156109cb57600080fd5b506103486109da3660046139a7565b612238565b3480156109eb57600080fd5b506103486109fa3660046137e8565b61228d565b348015610a0b57600080fd5b50600d5461048190600160a01b900460ff1681565b348015610a2c57600080fd5b50610481610a3b366004613760565b600b6020526000908152604090205460ff1681565b348015610a5c57600080fd5b50610348610a6b366004613760565b6122e7565b348015610a7c57600080fd5b506106a1610a8b366004613c5c565b612360565b610a98612413565b612710811115610aef5760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e4272696467653a2062726964676520666565203e2031303025000060448201526064015b60405180910390fd5b60088190556040518181527f9a749c8193bfd56b2b2a05c0bd18fbb0f69801a3fd6576c40b90537fd0fc3854906020015b60405180910390a150565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ba35760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c657200006044820152606401610ae6565b61ffff861660009081526001602052604081208054610bc190613ca9565b80601f0160208091040260200160405190810160405280929190818152602001828054610bed90613ca9565b8015610c3a5780601f10610c0f57610100808354040283529160200191610c3a565b820191906000526020600020905b815481529060010190602001808311610c1d57829003601f168201915b50505050509050805186869050148015610c55575060008151115b8015610c7d575080516020820120604051610c739088908890613cdd565b6040518091039020145b610cd85760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610ae6565b610d4e8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061246d92505050565b50505050505050565b610d5f612413565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610dc557600080fd5b505af1158015610dd9573d6000803e3d6000fd5b5050505050565b610de8612413565b6001600160a01b038116610e0e5760405162461bcd60e51b8152600401610ae690613ced565b6001600160a01b0381166000908152600a602052604090205460ff1615610e855760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4272696467653a20746f6b656e20616c72656164792072656769736044820152641d195c995960da1b6064820152608401610ae6565b6000610e90826124e6565b9050600660ff82161015610eff5760405162461bcd60e51b815260206004820152603060248201527f546f6b656e4272696467653a20646563696d616c73206d757374206265203e3d60448201526f205348415245445f444543494d414c5360801b6064820152608401610ae6565b6001600160a01b0382166000908152600a60205260409020805460ff19166001179055610f2d600682613d45565b610f3890600a613e42565b6001600160a01b0383166000818152600c602090815260409182902093909355519081527ff7fe8023cb2e36bde1d59a88ac5763a8c11be6d25e6819f71bb7e23e5bf0dc1691015b60405180910390a15050565b610f94612413565b61ffff909116600090815260036020526040902055565b610fb3612413565b6000610fbe846119b4565b9050808211156110105760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4272696467653a20666565206e6f7420656e6f75676800000000006044820152606401610ae6565b6110246001600160a01b03851684846125e4565b604080516001600160a01b038581168252602082018590528616917ff15a0a3784dea9b4fe33bc98e2450745e262d310237b2868ea8ef56967ff3ecb91015b60405180910390a250505050565b611079612413565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610dab565b61ffff8316600090815260016020526040812080548291906110ea90613ca9565b80601f016020809104026020016040519081016040528092919081815260200182805461111690613ca9565b80156111635780601f1061113857610100808354040283529160200191611163565b820191906000526020600020905b81548152906001019060200180831161114657829003601f168201915b50505050509050838360405161117a929190613cdd565b60405180910390208180519060200120149150509392505050565b61119d612413565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906111ed90869086908690600401613e7a565b600060405180830381600087803b15801561120757600080fd5b505af1158015610d4e573d6000803e3d6000fd5b600080611228848461263b565b60006112358180806126f7565b905060008061124a6040890160208a01613760565b60075460405163040a7bb160e41b81526001600160a01b03928316939093141593507f0000000000000000000000000000000000000000000000000000000000000000909116916340a7bb10916112b49161ffff909116903090879087908d908d90600401613e98565b6040805180830381865afa1580156112d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f49190613eee565b935093505050935093915050565b61130a612413565b6001600160a01b0381166113305760405162461bcd60e51b8152600401610ae690613ced565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe390bcec6614d6b1f8ae47a4d9d46531ce328e3d293ecd6ddd015cb01eff030090602001610b20565b3330146113dc5760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610ae6565b6114528686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781528993509150879087908190840183828082843760009201919091525061274192505050565b505050505050565b611462612413565b600d8054821515600160a81b0260ff60a81b199091161790556040517f5362d4bd13945e8d116b90d83a7050fa61ceb02bb79bfae783377adb46916d9490610b2090831515815260200190565b6114b7612413565b565b600160205260009081526040902080546114d290613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546114fe90613ca9565b801561154b5780601f106115205761010080835404028352916020019161154b565b820191906000526020600020905b81548152906001019060200180831161152e57829003601f168201915b505050505081565b600d548690600160a81b900460ff1615801561158857506001600160a01b0381166000908152600b602052604090205460ff16155b6115a45760405162461bcd60e51b8152600401610ae690613f12565b6115ac612a39565b6001600160a01b0387166000908152600a602052604090205460ff166115e45760405162461bcd60e51b8152600401610ae690613f3f565b60006115f08887612a92565b90506000816001600160401b0316116116605760405162461bcd60e51b815260206004820152602c60248201527f546f6b656e4272696467653a20616d6f756e745344206d75737420626520677260448201526b06561746572207468616e20360a41b6064820152608401610ae6565b6001600160a01b038816600090815260096020526040812080548392906116919084906001600160401b0316613f82565b92506101000a8154816001600160401b0302191690836001600160401b031602179055506116c488888388888834612b19565b86336001600160a01b0316896001600160a01b03167fbe6ff12fec5087498d44bc85f1a83235a630944a1e2d5a7938afe810370a58678960405161170a91815260200190565b60405180910390a450610d4e6001600655565b611725612413565b61173382826103e5856119b4565b6001600160a01b03821660009081526009602052604090205461176290839083906001600160401b0316611766565b5050565b61176e612413565b600d54600160b01b900460ff1680156117895750600e544210155b6117e45760405162461bcd60e51b815260206004820152602660248201527f546f6b656e4272696467653a20656d657267656e6379207769746864726177206044820152651b1bd8dad95960d21b6064820152608401610ae6565b6001600160a01b038316600090815260096020526040812080548392906118159084906001600160401b0316613fa9565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555060006118458483612ba4565b905061185b6001600160a01b03851684836125e4565b604080516001600160a01b038581168252602082018490528616917f49507695f37b729944475cf3388760a14760fef784b7ab5ca8863a5f3f8be6bd9101611063565b61ffff81166000908152600160205260408120805460609291906118c190613ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546118ed90613ca9565b801561193a5780601f1061190f5761010080835404028352916020019161193a565b820191906000526020600020905b81548152906001019060200180831161191d57829003601f168201915b5050505050905080516000036119925760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610ae6565b6119ad6000601483516119a59190613fc9565b839190612bd0565b9392505050565b6001600160a01b03811660009081526009602052604081205481906119e39084906001600160401b0316612ba4565b6040516370a0823160e01b815230600482015290915081906001600160a01b038516906370a0823190602401602060405180830381865afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a509190613fdc565b6119ad9190613fc9565b611a62612413565b818130604051602001611a7793929190613ff5565b60408051601f1981840301815291815261ffff8516600090815260016020522090611aa29082614061565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611ad693929190613e7a565b60405180910390a1505050565b611aeb612413565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610b20565b611b41612413565b6007805461ffff191661ffff83169081179091556040519081527f6a9ea26cc7efedf0df6fd048e06f3de4be1a978bb5d440277147c76e1c0eb75a90602001610b20565b600d546001600160a01b03811690600160a81b900460ff16158015611bc357506001600160a01b0381166000908152600b602052604090205460ff16155b611bdf5760405162461bcd60e51b8152600401610ae690613f12565b611be7612a39565b600d546001600160a01b03168015801590611c1a57506001600160a01b0381166000908152600a602052604090205460ff165b611c705760405162461bcd60e51b815260206004820152602160248201527f546f6b656e4272696467653a20455448206973206e6f7420737570706f7274656044820152601960fa1b6064820152608401610ae6565b611c7a8187612cdd565b955060008611611cdf5760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a20616d6f756e74206d75737420626520677265616044820152690746572207468616e20360b41b6064820152608401610ae6565b85341015611d2f5760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4272696467653a20666565206e6f7420656e6f75676800000000006044820152606401610ae6565b806001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d6a57600080fd5b505af1158015611d7e573d6000803e3d6000fd5b50505050506000611d8f8288612a92565b6001600160a01b038316600090815260096020526040812080549293508392909190611dc59084906001600160401b0316613f82565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550611e038289838989898d34611dfe9190613fc9565b612b19565b604051878152889033906000907fbe6ff12fec5087498d44bc85f1a83235a630944a1e2d5a7938afe810370a58679060200160405180910390a450506114526001600655565b611e51612413565b6001600160a01b0382166000818152600b6020908152604091829020805460ff19168515159081179091558251938452908301527fb1656bd3b50ddb6b12ef259c86e9cb359952b53c4403cfb5a83e23c515a35e229101610f80565b611eb5612413565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611f099088908890889088908890600401614120565b600060405180830381600087803b158015611f2357600080fd5b505af1158015611f37573d6000803e3d6000fd5b505050505050505050565b61ffff86166000908152600560205260408082209051611f659088908890613cdd565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080611fe55760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610ae6565b808383604051611ff6929190613cdd565b6040518091039020146120555760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610ae6565b61ffff871660009081526005602052604080822090516120789089908990613cdd565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252612110918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061274192505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e5878787878560405161214795949392919061414e565b60405180910390a150505050505050565b612160612413565b600d805460ff60b01b1916600160b01b8315150217905580612183576000612190565b6121904262093a80614189565b600e81905560408051831515815260208101929092527f27a37fc51e6c5d14309bbed3a54787c8788223b5d9cd5fe10605661665dd84159101610b20565b6121d6612413565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611ad6565b612240612413565b600d8054821515600160a01b0260ff60a01b199091161790556040517f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490610b2090831515815260200190565b612295612413565b61ffff831660009081526001602052604090206122b382848361419c565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611ad693929190613e7a565b6122ef612413565b6001600160a01b0381166123545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ae6565b61235d81612cf2565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156123e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612408919081019061425b565b90505b949350505050565b6000546001600160a01b031633146114b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ae6565b6000806124d05a60966366ad5c8a60e01b8989898960405160240161249594939291906142d1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190612d42565b9150915081611452576114528686868685612dcc565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b0386169161252c919061430f565b600060405180830381855afa9150503d8060008114612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b5091509150816125d05760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4272696467653a206661696c656420746f2067657420746f6b656e60448201526820646563696d616c7360b81b6064820152608401610ae6565b8080602001905181019061240b919061432b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612636908490612e69565b505050565b600d54600160a01b900460ff1615612696576007546117629061ffff16600084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612f3e915050565b80156117625760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a205f61646170746572506172616d73206d7573746044820152691031329032b6b83a3c9760b11b6064820152608401610ae6565b60408051600060208201526001600160a01b03949094166021850152604184019290925260c01b6001600160c01b0319166061830152805180830360490181526069909201905290565b60075461ffff8581169116146127a55760405162461bcd60e51b8152602060048201526024808201527f546f6b656e4272696467653a20696e76616c696420736f7572636520636861696044820152631b881a5960e21b6064820152608401610ae6565b6000806000806127b485613013565b600d5493975091955093509150600160a81b900460ff161580156127f157506001600160a01b0384166000908152600b602052604090205460ff16155b61280d5760405162461bcd60e51b8152600401610ae690613f12565b6001600160a01b0384166000908152600a602052604090205460ff166128455760405162461bcd60e51b8152600401610ae690613f3f565b6001600160a01b0384166000908152600960205260409020546001600160401b039081169083168110156128c75760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20696e73756666696369656e74206c697175696460448201526269747960e81b6064820152608401610ae6565b6128d18382613fa9565b6001600160a01b0386166000908152600960205260408120805467ffffffffffffffff19166001600160401b0393909316929092179091556129138685612ba4565b905060006008541161292757806000612930565b6129308161314d565b50600d549091506001600160a01b03878116911614801561294e5750825b156129b057600d5461296a906001600160a01b0316868361317e565b6040518181526001600160a01b038616906000907ffd19781f43410d9594fd4c02dd1d98dbe99099cbd222d5851a6e183c468d33ca9060200160405180910390a3612a2d565b6001600160a01b038516156129c557846129c9565b61dead5b94506129df6001600160a01b03871686836125e4565b846001600160a01b0316866001600160a01b03167ffd19781f43410d9594fd4c02dd1d98dbe99099cbd222d5851a6e183c468d33ca83604051612a2491815260200190565b60405180910390a35b50505050505050505050565b600260065403612a8b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ae6565b6002600655565b6001600160a01b0382166000908152600c60205260408120548190612ab79084614364565b90506001600160401b03811115612b105760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e4272696467653a20616d6f756e745344206f766572666c6f7700006044820152606401610ae6565b90505b92915050565b612b23838361263b565b6000612b308888886126f7565b600754909150612b9a9061ffff1682612b4c6020890189613760565b612b5c60408a0160208b01613760565b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250613214915050565b5050505050505050565b6001600160a01b0382166000908152600c6020526040812054612b10906001600160401b038416614386565b606081612bde81601f614189565b1015612c1d5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610ae6565b612c278284614189565b84511015612c6b5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610ae6565b606082158015612c8a5760405191506000825260208201604052612cd4565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612cc3578051835260209283019201612cab565b5050858452601f01601f1916604052505b50949350505050565b6000612b1083612ced8585612a92565b612ba4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000606060008060008661ffff166001600160401b03811115612d6757612d6761388c565b6040519080825280601f01601f191660200182016040528015612d91576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115612db3578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff16815260200190815260200160002085604051612dfd919061430f565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90612e5a908790879087908790879061439d565b60405180910390a15050505050565b6000612ebe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133b99092919063ffffffff16565b9050805160001480612edf575080806020019051810190612edf91906143fb565b6126365760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ae6565b6000612f49836133c8565b61ffff80871660009081526002602090815260408083209389168352929052205490915080612fba5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610ae6565b612fc48382614189565b8210156114525760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610ae6565b6000806000808451604a146130765760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20696e76616c6964207061796c6f6164206c656e6044820152620cee8d60eb1b6064820152608401610ae6565b60008560008151811061308b5761308b614418565b016020015160f81c60018111156130a4576130a461434e565b905060018160018111156130ba576130ba61434e565b146131075760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4272696467653a20756e6b6e6f776e207061636b657420747970656044820152606401610ae6565b6021860151945060418601519350604986015192508560498151811061312f5761312f614418565b602001015160f81c60f81b60f81c60ff166001149150509193509193565b600080612710600854846131619190614386565b61316b9190614364565b90506131778184613fc9565b9150915091565b604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b1580156131c057600080fd5b505af11580156131d4573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f1935050505015801561320e573d6000803e3d6000fd5b50505050565b61ffff86166000908152600160205260408120805461323290613ca9565b80601f016020809104026020016040519081016040528092919081815260200182805461325e90613ca9565b80156132ab5780601f10613280576101008083540402835291602001916132ab565b820191906000526020600020905b81548152906001019060200180831161328e57829003601f168201915b50505050509050805160000361331c5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610ae6565b613327878751613424565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c580310090849061337e908b9086908c908c908c908c9060040161442e565b6000604051808303818588803b15801561339757600080fd5b505af11580156133ab573d6000803e3d6000fd5b505050505050505050505050565b606061240b8484600085613495565b600060228251101561341c5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610ae6565b506022015190565b61ffff82166000908152600360205260408120549081900361344557506127105b808211156126365760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610ae6565b6060824710156134f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ae6565b600080866001600160a01b03168587604051613512919061430f565b60006040518083038185875af1925050503d806000811461354f576040519150601f19603f3d011682016040523d82523d6000602084013e613554565b606091505b509150915061356587838387613570565b979650505050505050565b606083156135df5782516000036135d8576001600160a01b0385163b6135d85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ae6565b508161240b565b61240b83838151156135f45781518083602001fd5b8060405162461bcd60e51b8152600401610ae69190613a14565b60006020828403121561362057600080fd5b5035919050565b803561ffff8116811461363957600080fd5b919050565b60008083601f84011261365057600080fd5b5081356001600160401b0381111561366757600080fd5b60208301915083602082850101111561367f57600080fd5b9250929050565b80356001600160401b038116811461363957600080fd5b600080600080600080608087890312156136b657600080fd5b6136bf87613627565b955060208701356001600160401b03808211156136db57600080fd5b6136e78a838b0161363e565b90975095508591506136fb60408a01613686565b9450606089013591508082111561371157600080fd5b5061371e89828a0161363e565b979a9699509497509295939492505050565b60006020828403121561374257600080fd5b612b1082613627565b6001600160a01b038116811461235d57600080fd5b60006020828403121561377257600080fd5b8135612b108161374b565b6000806040838503121561379057600080fd5b61379983613627565b946020939093013593505050565b6000806000606084860312156137bc57600080fd5b83356137c78161374b565b925060208401356137d78161374b565b929592945050506040919091013590565b6000806000604084860312156137fd57600080fd5b61380684613627565b925060208401356001600160401b0381111561382157600080fd5b61382d8682870161363e565b9497909650939450505050565b60006040828403121561384c57600080fd5b50919050565b60008060006060848603121561386757600080fd5b613871858561383a565b925060408401356001600160401b0381111561382157600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156138ca576138ca61388c565b604052919050565b60006001600160401b038211156138eb576138eb61388c565b50601f01601f191660200190565b60008060006060848603121561390e57600080fd5b61391784613627565b925060208401356001600160401b0381111561393257600080fd5b8401601f8101861361394357600080fd5b8035613956613951826138d2565b6138a2565b81815287602083850101111561396b57600080fd5b8160208401602083013760006020838301015280945050505061399060408501613686565b90509250925092565b801515811461235d57600080fd5b6000602082840312156139b957600080fd5b8135612b1081613999565b60005b838110156139df5781810151838201526020016139c7565b50506000910152565b60008151808452613a008160208601602086016139c4565b601f01601f19169290920160200192915050565b602081526000612b1060208301846139e8565b60008060008060008060c08789031215613a4057600080fd5b8635613a4b8161374b565b95506020870135945060408701359350613a68886060890161383a565b925060a08701356001600160401b03811115613a8357600080fd5b61371e89828a0161363e565b60008060408385031215613aa257600080fd5b613aab83613627565b9150613ab960208401613627565b90509250929050565b60008060408385031215613ad557600080fd5b8235613ae08161374b565b91506020830135613af08161374b565b809150509250929050565b600080600060608486031215613b1057600080fd5b8335613b1b8161374b565b92506020840135613b2b8161374b565b915061399060408501613686565b600080600080600060a08688031215613b5157600080fd5b8535945060208601359350613b69876040880161383a565b925060808601356001600160401b03811115613b8457600080fd5b613b908882890161363e565b969995985093965092949392505050565b60008060408385031215613bb457600080fd5b8235613bbf8161374b565b91506020830135613af081613999565b600080600080600060808688031215613be757600080fd5b613bf086613627565b9450613bfe60208701613627565b93506040860135925060608601356001600160401b03811115613b8457600080fd5b600080600060608486031215613c3557600080fd5b613c3e84613627565b9250613c4c60208501613627565b9150604084013590509250925092565b60008060008060808587031215613c7257600080fd5b613c7b85613627565b9350613c8960208601613627565b92506040850135613c998161374b565b9396929550929360600135925050565b600181811c90821680613cbd57607f821691505b60208210810361384c57634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b60208082526022908201527f546f6b656e4272696467653a20696e76616c696420746f6b656e206164647265604082015261737360f01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115612b1357612b13613d2f565b600181815b80851115613d99578160001904821115613d7f57613d7f613d2f565b80851615613d8c57918102915b93841c9390800290613d63565b509250929050565b600082613db057506001612b13565b81613dbd57506000612b13565b8160018114613dd35760028114613ddd57613df9565b6001915050612b13565b60ff841115613dee57613dee613d2f565b50506001821b612b13565b5060208310610133831016604e8410600b8410161715613e1c575081810a612b13565b613e268383613d5e565b8060001904821115613e3a57613e3a613d2f565b029392505050565b6000612b1060ff841683613da1565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612408604083018486613e51565b61ffff871681526001600160a01b038616602082015260a060408201819052600090613ec6908301876139e8565b85151560608401528281036080840152613ee1818587613e51565b9998505050505050505050565b60008060408385031215613f0157600080fd5b505080516020909101519092909150565b602080825260139082015272151bdad95b909c9a5919d94e881c185d5cd959606a1b604082015260600190565b60208082526023908201527f546f6b656e4272696467653a20746f6b656e206973206e6f7420737570706f726040820152621d195960ea1b606082015260800190565b6001600160401b03818116838216019080821115613fa257613fa2613d2f565b5092915050565b6001600160401b03828116828216039080821115613fa257613fa2613d2f565b81810381811115612b1357612b13613d2f565b600060208284031215613fee57600080fd5b5051919050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f82111561263657600081815260208120601f850160051c810160208610156140425750805b601f850160051c820191505b818110156114525782815560010161404e565b81516001600160401b0381111561407a5761407a61388c565b61408e816140888454613ca9565b8461401b565b602080601f8311600181146140c357600084156140ab5750858301515b600019600386901b1c1916600185901b178555611452565b600085815260208120601f198616915b828110156140f2578886015182559484019460019091019084016140d3565b50858210156141105787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff808816835280871660208401525084604083015260806060830152613565608083018486613e51565b61ffff8616815260806020820152600061416c608083018688613e51565b6001600160401b0394909416604083015250606001529392505050565b80820180821115612b1357612b13613d2f565b6001600160401b038311156141b3576141b361388c565b6141c7836141c18354613ca9565b8361401b565b6000601f8411600181146141fb57600085156141e35750838201355b600019600387901b1c1916600186901b178355610dd9565b600083815260209020601f19861690835b8281101561422c578685013582556020948501946001909201910161420c565b50868210156142495760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561426d57600080fd5b81516001600160401b0381111561428357600080fd5b8201601f8101841361429457600080fd5b80516142a2613951826138d2565b8181528560208385010111156142b757600080fd5b6142c88260208301602086016139c4565b95945050505050565b61ffff851681526080602082015260006142ee60808301866139e8565b6001600160401b0385166040840152828103606084015261356581856139e8565b600082516143218184602087016139c4565b9190910192915050565b60006020828403121561433d57600080fd5b815160ff81168114612b1057600080fd5b634e487b7160e01b600052602160045260246000fd5b60008261438157634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417612b1357612b13613d2f565b61ffff8616815260a0602082015260006143ba60a08301876139e8565b6001600160401b038616604084015282810360608401526143db81866139e8565b905082810360808401526143ef81856139e8565b98975050505050505050565b60006020828403121561440d57600080fd5b8151612b1081613999565b634e487b7160e01b600052603260045260246000fd5b61ffff8716815260c06020820152600061444b60c08301886139e8565b828103604084015261445d81886139e8565b6001600160a01b0387811660608601528616608085015283810360a08501529050613ee181856139e856fea2646970667358221220606fdcce0bc67f441e9e15a027fb406ebeb902c69dcb264e0e32ee597975402f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1635,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 455,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 461,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 465,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 467,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "precrime",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 997,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "failedMessages",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 1751,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2681,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "aptosChainId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 2683,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "bridgeFeeBP",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2687,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "tvlSDs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 2691,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2695,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "pausedTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2699,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "ld2sdRates",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2701,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "weth",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 2703,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "useCustomAdapterParams",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2705,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "globalPaused",
        "offset": 21,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2707,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "emergencyWithdrawEnabled",
        "offset": 22,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2709,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "emergencyWithdrawTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}